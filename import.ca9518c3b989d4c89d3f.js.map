{"version":3,"sources":["webpack:///./components/SourceInput.tsx","webpack:///./components/Import.tsx"],"names":["fileSourceMenu","key","text","SourceInput","input","usingEdgeOrIE","value","onChange","inputType","file","navigator","userAgent","includes","className","style","type","accept","e","target","files","id","TextField","multiline","rows","spellCheck","wrap","_","textInput","Dropdown","label","options","responsiveMode","large","selectedKey","option","props","source","delimiter","newline","encoding","buttonOnClick","store","import","state","TitleBar","helpLink","mac","this","platform","Office","PlatformType","Mac","setState","EncodingDropdown","hidden","showAutoDetect","DelimiterInput","showLengthError","NewlineDropdown","TooltipHost","styles","root","display","content","buttonTooltipContent","delay","zero","PrimaryButton","disabled","onClick","ProgressBar","abort","progress","Toggle","inlineLabel","defaultChecked","initialSaveStatus","checked","setSaveStatus","ParserOutputBox","parserOutput","BottomBar","length","initialized","StoredComponent","connect"],"mappings":"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","file":"import.ca9518c3b989d4c89d3f.js","sourcesContent":["import * as React from 'react';\nimport {InputType, Source} from '../Parser';\nimport * as style from './style.css';\nimport {Dropdown, IDropdownOption, ResponsiveMode, TextField} from '@fluentui/react';\n\ninterface Props {\n\tvalue: Source;\n\tonChange: (value: Source) => void;\n}\n\nconst fileSourceMenu: IDropdownOption[] = [\n\t{\n\t\tkey: InputType.file,\n\t\ttext: 'File',\n\t},\n\t{\n\t\tkey: InputType.text,\n\t\ttext: 'Text input',\n\t},\n];\n\nfunction fileInput(onChange: (value: File) => void): React.ReactElement {\n\tconst usingEdgeOrIE = navigator.userAgent.includes('Edge')\n\t\t|| navigator.userAgent.includes('Trident');\n\n\t// TODO test fullWidth on firefox and chrome\n\treturn (\n\t\t<>\n\t\t\t<input\n\t\t\t\tclassName={usingEdgeOrIE ? style.fullWidth : null}\n\t\t\t\ttype='file'\n\t\t\t\taccept='text/csv'\n\t\t\t\tonChange={e => onChange(e.target.files[0])}\n\t\t\t\tid='SourceInput-FileInput'\n\t\t\t/>\n\t\t\t<br />\n\t\t</>\n\t);\n}\n\nfunction textInput(value: string, onChange: (value: string) => void): React.ReactElement {\n\treturn (\n\t\t<TextField\n\t\t\tclassName={style.monospace}\n\t\t\tmultiline rows={10}\n\t\t\tspellCheck={false}\n\t\t\twrap='off'\n\t\t\tonChange={(_, text) => onChange(text)}\n\t\t\tvalue={value}\n\t\t\tid='SourceInput-TextInput'\n\t\t/>\n\t);\n}\n\nexport function SourceInput({value, onChange}: Props): React.ReactElement {\n\tlet input: React.ReactElement;\n\tswitch (value.inputType) {\n\tcase InputType.file:\n\t\tinput = fileInput(file => onChange({inputType: InputType.file, file, text: ''}));\n\t\tbreak;\n\tcase InputType.text:\n\t\tinput = textInput(\n\t\t\tvalue.text,\n\t\t\ttext => onChange({inputType: InputType.text, file: null, text}),\n\t\t);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Dropdown\n\t\t\t\tlabel={'Import type'}\n\t\t\t\toptions={fileSourceMenu}\n\t\t\t\tresponsiveMode={ResponsiveMode.large}\n\t\t\t\tselectedKey={value.inputType}\n\t\t\t\tonChange={\n\t\t\t\t\t(_, option) => onChange(\n\t\t\t\t\t\t{inputType: option.key as InputType, file: null, text: ''},\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\tid='SourceInput-Dropdown'\n\t\t\t/>\n\t\t\t<div className={style.smallDivider} />\n\t\t\t{input}\n\t\t</>\n\t);\n}","import {Store} from '../Store';\nimport * as React from 'react';\nimport {connect} from '../connect';\nimport {PrimaryButton, Toggle, TooltipDelay, TooltipHost} from '@fluentui/react';\nimport {ImportOptions, InputType, NewlineSequence} from '../Parser';\nimport {SourceInput} from './SourceInput';\nimport {DelimiterInput} from './DelimiterInput';\nimport {NewlineDropdown} from './NewlineDropdown';\nimport {EncodingDropdown} from './EncodingDropdown';\nimport {ProgressBar} from './ProgressBar';\nimport * as style from './style.css';\nimport {BottomBar} from './BottomBar';\nimport {ParserOutputBox} from './ParserOutputBox';\nimport {StoredComponent} from './StoredComponent';\nimport {MemoryHistory} from 'history';\nimport {TitleBar} from './TitleBar';\n\ninterface Props {\n\tstore: Store;\n\thistory: MemoryHistory;\n}\n\nexport class ImportComponent extends StoredComponent<Props, ImportOptions> {\n\tpublic constructor(props: Props) {\n\t\tsuper(props, 'import', {\n\t\t\tsource: {inputType: InputType.file, file: null, text: ''},\n\t\t\tdelimiter: '\\u002c',\n\t\t\tnewline: NewlineSequence.AutoDetect,\n\t\t\tencoding: '',\n\t\t}, ['delimiter', 'newline', 'encoding']);\n\t}\n\n\tpublic render(): React.ReactNode {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className={style.pageMargin}>\n\t\t\t\t\t{/* eslint-disable no-undef */}\n\t\t\t\t\t<TitleBar\n\t\t\t\t\t\ttext={'Import CSV'}\n\t\t\t\t\t\thelpLink={\n\t\t\t\t\t\t\t'https://github.com/Emurasoft/excel-csv-import-help/blob/master/en.md'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmac={this.props.store.state.platform === Office.PlatformType.Mac}\n\t\t\t\t\t/>\n\t\t\t\t\t{/* eslint-enable no-undef */}\n\t\t\t\t\t<SourceInput\n\t\t\t\t\t\tvalue={this.state.source}\n\t\t\t\t\t\tonChange={(source) => this.setState({source})}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<EncodingDropdown\n\t\t\t\t\t\tvalue={this.state.encoding}\n\t\t\t\t\t\tonChange={(encoding) => this.setState({encoding})}\n\t\t\t\t\t\thidden={this.state.source.inputType === InputType.text}\n\t\t\t\t\t\tshowAutoDetect={true}\n\t\t\t\t\t/>\n\t\t\t\t\t<DelimiterInput\n\t\t\t\t\t\tvalue={this.state.delimiter}\n\t\t\t\t\t\tonChange={(delimiter) => this.setState({delimiter})}\n\t\t\t\t\t\tshowLengthError={true}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<NewlineDropdown\n\t\t\t\t\t\tvalue={this.state.newline as NewlineSequence}\n\t\t\t\t\t\tonChange={(newline) => this.setState({newline})}\n\t\t\t\t\t\tshowAutoDetect={true}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<TooltipHost\n\t\t\t\t\t\tstyles={{root: {display: 'inline-block'}} /* Resize to fit button */}\n\t\t\t\t\t\tcontent={this.buttonTooltipContent()}\n\t\t\t\t\t\tdelay={TooltipDelay.zero}\n\t\t\t\t\t>\n\t\t\t\t\t\t<PrimaryButton\n\t\t\t\t\t\t\tdisabled={this.buttonTooltipContent() !== ''}\n\t\t\t\t\t\t\tonClick={this.buttonOnClick}\n\t\t\t\t\t\t\ttext={'Import CSV'}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</TooltipHost>\n\t\t\t\t\t<br />\n\t\t\t\t\t<ProgressBar\n\t\t\t\t\t\tonClick={this.props.store.abort}\n\t\t\t\t\t\tprogress={this.props.store.state.progress}\n\t\t\t\t\t/>\n\t\t\t\t\t<Toggle\n\t\t\t\t\t\tinlineLabel label={'Save options'}\n\t\t\t\t\t\tdefaultChecked={this.initialSaveStatus()}\n\t\t\t\t\t\tonChange={(_, checked) => this.setSaveStatus(checked)}\n\t\t\t\t\t/>\n\t\t\t\t\t<ParserOutputBox parserOutput={this.props.store.state.parserOutput} />\n\t\t\t\t\t<BottomBar />\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n\n\tprivate buttonOnClick = async () => {\n\t\tawait this.props.store.import(this.state);\n\t}\n\n\tprivate buttonTooltipContent(): string {\n\t\tif (this.state.source.inputType == InputType.file && this.state.source.file == null) {\n\t\t\treturn 'Import source is not selected';\n\t\t} else if (this.state.delimiter.length !== 1) {\n\t\t\treturn 'Delimiter is invalid';\n\t\t} else if (!this.props.store.state.initialized) {\n\t\t\treturn 'Excel API is not initialized';\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n}\n\nexport default connect(ImportComponent);"],"sourceRoot":""}