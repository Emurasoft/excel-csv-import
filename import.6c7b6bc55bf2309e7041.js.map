{"version":3,"sources":["webpack:///./src/components/SourceInput.tsx","webpack:///./src/components/Import.tsx"],"names":["dropdownOnChange","_","option","props","onChange","inputType","key","file","text","fileOnChange","e","target","files","usingEdgeOrIE","navigator","userAgent","includes","componentMap","className","style","type","accept","this","id","TextField","multiline","rows","spellCheck","wrap","value","Dropdown","label","options","responsiveMode","large","selectedKey","source","delimiter","newline","encoding","buttonOnClick","store","import","state","TitleBar","helpLink","mac","platform","Office","PlatformType","Mac","setState","EncodingDropdown","hidden","showAutoDetect","DelimiterInput","showLengthError","NewlineDropdown","TooltipHost","styles","root","display","content","buttonTooltipContent","delay","zero","PrimaryButton","disabled","onClick","ProgressBar","abort","progress","Toggle","inlineLabel","defaultChecked","initialSaveStatus","checked","setSaveStatus","ParserOutputBox","parserOutput","BottomBar","length","initialized","StoredComponent","connect"],"mappings":"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","file":"import.6c7b6bc55bf2309e7041.js","sourcesContent":["import * as React from 'react';\nimport {InputType, Source} from '../Parser';\nimport * as style from './style.css';\nimport {Dropdown, IDropdownOption, TextField, ResponsiveMode} from '@fluentui/react';\nimport {BaseProps} from './BaseProps';\n\nexport class SourceInput extends React.Component<BaseProps<Source>, {}> {\n    public render(): React.ReactNode {\n        const fileSourceMenu: IDropdownOption[] = [\n            {\n                key: InputType.file,\n                text: 'File',\n            },\n            {\n                key: InputType.text,\n                text: 'Text input',\n            },\n        ];\n\n        const usingEdgeOrIE = navigator.userAgent.includes('Edge')\n            || navigator.userAgent.includes('Trident');\n\n        const componentMap = {\n            [InputType.file]: (\n                <>\n                    <input\n                        className={usingEdgeOrIE ? style.fullWidth : null}\n                        type='file'\n                        accept='text/csv'\n                        onChange={this.fileOnChange}\n                        id='SourceInput-FileInput'\n                    />\n                    <br />\n                </>\n            ),\n            [InputType.text]: (\n                <TextField\n                    className={style.monospace}\n                    multiline rows={10}\n                    spellCheck={false}\n                    wrap='off'\n                    onChange={(_, text) => this.props.onChange({inputType: InputType.text, text})}\n                    value={this.props.value.text as string}\n                    id='SourceInput-TextInput'\n                />\n            ),\n        };\n\n        return (\n            <>\n                <Dropdown\n                    label={'Import type'}\n                    options={fileSourceMenu}\n                    responsiveMode={ResponsiveMode.large}\n                    selectedKey={this.props.value.inputType}\n                    onChange={this.dropdownOnChange}\n                    id='SourceInput-Dropdown'\n                />\n                <div className={style.smallDivider} />\n                {componentMap[this.props.value.inputType]}\n            </>\n        );\n    }\n\n    private dropdownOnChange = (_, option) => {\n        this.props.onChange({inputType: option.key as InputType, file: null, text: ''});\n    }\n\n    private fileOnChange =(e) => {\n        this.props.onChange({inputType: InputType.file, file: e.target.files[0], text: ''});\n    }\n}","import {Store} from '../Store';\nimport * as React from 'react';\nimport {connect} from '../connect';\nimport {PrimaryButton, Toggle, TooltipDelay, TooltipHost} from '@fluentui/react';\nimport {ImportOptions, InputType, NewlineSequence} from '../Parser';\nimport {SourceInput} from './SourceInput';\nimport {DelimiterInput} from './DelimiterInput';\nimport {NewlineDropdown} from './NewlineDropdown';\nimport {EncodingDropdown} from './EncodingDropdown';\nimport {ProgressBar} from './ProgressBar';\nimport * as style from './style.css';\nimport {BottomBar} from './BottomBar';\nimport {ParserOutputBox} from './ParserOutputBox';\nimport {StoredComponent} from './StoredComponent';\nimport {MemoryHistory} from 'history';\nimport {TitleBar} from './TitleBar';\n\ninterface Props {\n    store: Store;\n    history: MemoryHistory;\n}\n\nexport class ImportComponent extends StoredComponent<Props, ImportOptions> {\n    public constructor(props: Props) {\n        super(props, 'import', {\n            source: {inputType: InputType.file, file: null, text: ''},\n            delimiter: '\\u002c',\n            newline: NewlineSequence.AutoDetect,\n            encoding: '',\n        }, ['delimiter', 'newline', 'encoding']);\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <>\n                <div className={style.pageMargin}>\n                    {/* eslint-disable no-undef */}\n                    <TitleBar\n                        text={'Import CSV'}\n                        helpLink={\n                            'https://github.com/Emurasoft/excel-csv-import-help/blob/master/en.md'\n                        }\n                        mac={this.props.store.state.platform === Office.PlatformType.Mac}\n                    />\n                    {/* eslint-enable no-undef */}\n                    <SourceInput\n                        value={this.state.source}\n                        onChange={(source) => this.setState({source})}\n                    />\n                    <br />\n                    <EncodingDropdown\n                        value={this.state.encoding}\n                        onChange={(encoding) => this.setState({encoding})}\n                        hidden={this.state.source.inputType === InputType.text}\n                        showAutoDetect={true}\n                    />\n                    <DelimiterInput\n                        value={this.state.delimiter}\n                        onChange={(delimiter) => this.setState({delimiter})}\n                        showLengthError={true}\n                    />\n                    <br />\n                    <NewlineDropdown\n                        value={this.state.newline as NewlineSequence}\n                        onChange={(newline) => this.setState({newline})}\n                        showAutoDetect={true}\n                    />\n                    <br />\n                    <TooltipHost\n                        styles={{root: {display: 'inline-block'}} /* Resize to fit button */}\n                        content={this.buttonTooltipContent()}\n                        delay={TooltipDelay.zero}\n                    >\n                        <PrimaryButton\n                            disabled={this.buttonTooltipContent() !== ''}\n                            onClick={this.buttonOnClick}\n                            text={'Import CSV'}\n                        />\n                    </TooltipHost>\n                    <br />\n                    <ProgressBar\n                        onClick={this.props.store.abort}\n                        progress={this.props.store.state.progress}\n                    />\n                    <Toggle\n                        inlineLabel label={'Save options'}\n                        defaultChecked={this.initialSaveStatus()}\n                        onChange={(_, checked) => this.setSaveStatus(checked)}\n                    />\n                    <ParserOutputBox parserOutput={this.props.store.state.parserOutput} />\n                    <BottomBar />\n                </div>\n            </>\n        );\n    }\n\n    private buttonOnClick = async () => {\n        await this.props.store.import(this.state);\n    }\n\n    private buttonTooltipContent(): string {\n        if (this.state.source.inputType == InputType.file && this.state.source.file == null) {\n            return 'Import source is not selected';\n        } else if (this.state.delimiter.length !== 1) {\n            return 'Delimiter is invalid';\n        } else if (!this.props.store.state.initialized) {\n            return 'Excel API is not initialized';\n        } else {\n            return '';\n        }\n    }\n}\n\nexport default connect(ImportComponent);"],"sourceRoot":""}