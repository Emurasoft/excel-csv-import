{"version":3,"sources":["webpack:///./components/SourceInput.tsx","webpack:///./components/Import.tsx"],"names":["fileSourceMenu","key","text","SourceInput","input","value","onChange","inputType","file","className","style","type","accept","e","target","files","id","TextField","multiline","rows","spellCheck","wrap","_","textInput","Dropdown","label","options","responsiveMode","large","selectedKey","option","Import","ImportComponent","store","buttonTooltipContent","source","setSource","delimiter","setDelimiter","newline","setNewline","encoding","setEncoding","length","state","initialized","TitleBar","helpLink","mac","platform","Office","PlatformType","Mac","EncodingDropdown","hidden","showAutoDetect","DelimiterInput","showLengthError","NewlineDropdown","TooltipHost","styles","root","display","content","delay","zero","PrimaryButton","disabled","onClick","import","ProgressBar","abort","progress","ParserOutputBox","parserOutput","BottomBar"],"mappings":"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","file":"import.c970f319fc90778247b0.js","sourcesContent":["import * as React from 'react';\nimport {InputType, Source} from '../Parser';\nimport * as style from './style.css';\nimport {Dropdown, IDropdownOption, ResponsiveMode, TextField} from '@fluentui/react';\n\ninterface Props {\n\tvalue: Source;\n\tonChange: (value: Source) => void;\n}\n\nconst fileSourceMenu: IDropdownOption[] = [\n\t{\n\t\tkey: InputType.file,\n\t\ttext: 'File',\n\t},\n\t{\n\t\tkey: InputType.text,\n\t\ttext: 'Text input',\n\t},\n];\n\nfunction fileInput(onChange: (value: File) => void): React.ReactElement {\n\treturn (\n\t\t<>\n\t\t\t<input\n\t\t\t\tclassName={style.fullWidth}\n\t\t\t\ttype='file'\n\t\t\t\taccept='text/csv'\n\t\t\t\tonChange={e => onChange(e.target.files[0])}\n\t\t\t\tid='SourceInput-FileInput'\n\t\t\t/>\n\t\t\t<br />\n\t\t</>\n\t);\n}\n\nfunction textInput(value: string, onChange: (value: string) => void): React.ReactElement {\n\treturn (\n\t\t<TextField\n\t\t\tclassName={style.monospace}\n\t\t\tmultiline rows={10}\n\t\t\tspellCheck={false}\n\t\t\twrap='off'\n\t\t\tonChange={(_, text) => onChange(text)}\n\t\t\tvalue={value}\n\t\t\tid='SourceInput-TextInput'\n\t\t/>\n\t);\n}\n\nexport function SourceInput({value, onChange}: Props): React.ReactElement {\n\tlet input: React.ReactElement;\n\tswitch (value.inputType) {\n\tcase InputType.file:\n\t\tinput = fileInput(file => onChange({inputType: InputType.file, file, text: ''}));\n\t\tbreak;\n\tcase InputType.text:\n\t\tinput = textInput(\n\t\t\tvalue.text,\n\t\t\ttext => onChange({inputType: InputType.text, file: null, text}),\n\t\t);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Dropdown\n\t\t\t\tlabel={'Import type'}\n\t\t\t\toptions={fileSourceMenu}\n\t\t\t\tresponsiveMode={ResponsiveMode.large}\n\t\t\t\tselectedKey={value.inputType}\n\t\t\t\tonChange={\n\t\t\t\t\t(_, option) => onChange(\n\t\t\t\t\t\t{inputType: option.key as InputType, file: null, text: ''},\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\tid='SourceInput-Dropdown'\n\t\t\t/>\n\t\t\t<div className={style.smallDivider} />\n\t\t\t{input}\n\t\t</>\n\t);\n}","import {Context, Store} from '../Store';\nimport * as React from 'react';\nimport {PrimaryButton, TooltipDelay, TooltipHost} from '@fluentui/react';\nimport {InputType, NewlineSequence, Source} from '../Parser';\nimport {SourceInput} from './SourceInput';\nimport {DelimiterInput} from './DelimiterInput';\nimport {NewlineDropdown} from './NewlineDropdown';\nimport {EncodingDropdown} from './EncodingDropdown';\nimport {ProgressBar} from './ProgressBar';\nimport * as style from './style.css';\nimport {BottomBar} from './BottomBar';\nimport {ParserOutputBox} from './ParserOutputBox';\nimport {TitleBar} from './TitleBar';\nimport {namespacedUseLocalStorage} from '../useLocalStorage';\nimport {useContext, useState} from 'react';\n\nconst useLocalStorage = namespacedUseLocalStorage('import');\n\nexport default function Import(): React.ReactElement {\n\treturn <ImportComponent store={useContext(Context)} />\n}\n\nexport function ImportComponent({store}: {store: Store}): React.ReactElement {\n\tconst [source, setSource] = useState(\n\t\t{inputType: InputType.file, file: null, text: ''} as Source,\n\t);\n\tconst [delimiter, setDelimiter] = useLocalStorage('delimiter', '\\u002c');\n\tconst [newline, setNewline] = useLocalStorage('newline', NewlineSequence.AutoDetect);\n\tconst [encoding, setEncoding] = useLocalStorage('encoding', '');\n\n\tlet buttonTooltipContent: string;\n\tif (source.inputType == InputType.file && source.file == null) {\n\t\tbuttonTooltipContent = 'Import source is not selected';\n\t} else if (delimiter.length !== 1) {\n\t\tbuttonTooltipContent = 'Delimiter is invalid';\n\t} else if (!store.state.initialized) {\n\t\tbuttonTooltipContent = 'Excel API is not initialized';\n\t} else {\n\t\tbuttonTooltipContent = '';\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className={style.pageMargin}>\n\t\t\t\t{/* eslint-disable no-undef */}\n\t\t\t\t<TitleBar\n\t\t\t\t\ttext={'Import CSV'}\n\t\t\t\t\thelpLink={\n\t\t\t\t\t\t'https://github.com/Emurasoft/excel-csv-import-help/blob/master/en.md'\n\t\t\t\t\t}\n\t\t\t\t\tmac={store.state.platform === Office.PlatformType.Mac}\n\t\t\t\t/>\n\t\t\t\t{/* eslint-enable no-undef */}\n\t\t\t\t<SourceInput\n\t\t\t\t\tvalue={source}\n\t\t\t\t\tonChange={setSource}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<EncodingDropdown\n\t\t\t\t\tvalue={encoding}\n\t\t\t\t\tonChange={setEncoding}\n\t\t\t\t\thidden={source.inputType === InputType.text}\n\t\t\t\t\tshowAutoDetect={true}\n\t\t\t\t/>\n\t\t\t\t<DelimiterInput\n\t\t\t\t\tvalue={delimiter}\n\t\t\t\t\tonChange={setDelimiter}\n\t\t\t\t\tshowLengthError={true}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<NewlineDropdown\n\t\t\t\t\tvalue={newline}\n\t\t\t\t\tonChange={setNewline}\n\t\t\t\t\tshowAutoDetect={true}\n\t\t\t\t/>\n\t\t\t\t<br />\n\t\t\t\t<TooltipHost\n\t\t\t\t\tstyles={{root: {display: 'inline-block'}} /* Resize to fit button */}\n\t\t\t\t\tcontent={buttonTooltipContent}\n\t\t\t\t\tdelay={TooltipDelay.zero}\n\t\t\t\t>\n\t\t\t\t\t<PrimaryButton\n\t\t\t\t\t\tdisabled={buttonTooltipContent !== ''}\n\t\t\t\t\t\tonClick={() => store.import({source, newline, delimiter, encoding})}\n\t\t\t\t\t\ttext={'Import CSV'}\n\t\t\t\t\t/>\n\t\t\t\t</TooltipHost>\n\t\t\t\t<br />\n\t\t\t\t<ProgressBar\n\t\t\t\t\tonClick={store.abort}\n\t\t\t\t\tprogress={store.state.progress}\n\t\t\t\t/>\n\t\t\t\t<ParserOutputBox parserOutput={store.state.parserOutput} />\n\t\t\t\t<BottomBar />\n\t\t\t</div>\n\t\t</>\n\t);\n}"],"sourceRoot":""}