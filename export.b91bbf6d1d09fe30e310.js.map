{"version":3,"sources":["webpack:///./node_modules/file-saver/dist/FileSaver.min.js","webpack:///./src/components/ExportTypeDropdown.tsx","webpack:///./src/components/Export.tsx"],"names":["global","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","c","b","d","e","XMLHttpRequest","open","responseType","onload","a","response","onerror","console","error","send","status","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","f","self","saveAs","HTMLAnchorElement","prototype","g","h","i","URL","webkitURL","j","createElement","name","download","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","navigator","msSaveOrOpenBlob","autoBom","warn","test","type","Blob","title","body","innerText","HTMLElement","safari","userAgent","FileReader","onloadend","result","replace","readAsDataURL","k","l","module","exports","apply","ExportType","ExportTypeDropdown_ExportTypeDropdown","_React$Component","ExportTypeDropdown","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","arguments","_inherits","react","key","value","options","_this","textOption","text","props","enableFileExport","file","Dropdown","label","responsiveMode","withResponsiveMode","large","selectedKey","onChange","_","option","Export_ExportComponent","_StoredComponent","ExportComponent","Export_classCallCheck","Export_possibleConstructorReturn","Export_getPrototypeOf","call","exportType","delimiter","newline","Parser","CRLF","encoding","outputText","show","exportTypeDropdownValue","Store","store","state","platform","buttonOnClick","_asyncToGenerator","regeneratorRuntime","mark","_callee","newOutputText","exportOptions","csvStringAndName","wrap","_context","prev","next","Object","assign","setState","sent","abrupt","saveOrOutput","stop","Export_inherits","StoredComponent","_this2","outputTextField","TextField","className","style","readOnly","multiline","rows","spellCheck","largeFileWarning","Text","color","variant","TitleBar","helpLink","mac","Office","PlatformType","Mac","EncodingDropdown","hidden","showAutoDetect","DelimiterInput","showLengthError","NewlineDropdown","TooltipHost","styles","root","display","content","buttonTooltipContent","PrimaryButton","onClick","disabled","largeFile","ProgressBar","abort","progress","Toggle","inlineLabel","defaultChecked","initialSaveStatus","checked","setSaveStatus","ParserOutputBox","parserOutput","BottomBar","blob","string","FileSaver_min","initialized","__webpack_exports__","connect"],"mappings":"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","file":"export.b91bbf6d1d09fe30e310.js","sourcesContent":["(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(b,c,d){var e=new XMLHttpRequest;e.open(\"GET\",b),e.responseType=\"blob\",e.onload=function(){a(e.response,c,d)},e.onerror=function(){console.error(\"could not download file\")},e.send()}function d(a){var b=new XMLHttpRequest;return b.open(\"HEAD\",a,!1),b.send(),200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(a,b,d,e){if(e=e||open(\"\",\"_blank\"),e&&(e.document.title=e.document.body.innerText=\"downloading...\"),\"string\"==typeof a)return c(a,b,d);var g=\"application/octet-stream\"===a.type,h=/constructor/i.test(f.HTMLElement)||f.safari,i=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((i||g&&h)&&\"object\"==typeof FileReader){var j=new FileReader;j.onloadend=function(){var a=j.result;a=i?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),e?e.location.href=a:location=a,e=null},j.readAsDataURL(a)}else{var k=f.URL||f.webkitURL,l=k.createObjectURL(a);e?e.location=l:location.href=l,e=null,setTimeout(function(){k.revokeObjectURL(l)},4E4)}});f.saveAs=a.saveAs=a,\"undefined\"!=typeof module&&(module.exports=a)});\n\n//# sourceMappingURL=FileSaver.min.js.map","import * as React from 'react';\nimport {BaseProps} from './BaseProps';\nimport {Dropdown, IDropdownOption} from 'office-ui-fabric-react';\nimport {\n    ResponsiveMode,\n} from 'office-ui-fabric-react/lib-commonjs/utilities/decorators/withResponsiveMode';\nimport {ExportType} from './Export';\n\ninterface Props extends BaseProps<ExportType> {\n    enableFileExport: boolean;\n}\n\nexport class ExportTypeDropdown extends React.Component<Props, {}> {\n    public render(): React.ReactNode {\n\n        const textOption: IDropdownOption = {\n            key: ExportType.text,\n            text: 'Textbox',\n        }\n\n        let options: IDropdownOption[];\n        if (this.props.enableFileExport) {\n            options = [\n                {\n                    key: ExportType.file,\n                    text: 'File',\n                },\n                textOption,\n            ];\n        } else {\n            options = [textOption];\n        }\n\n        return (\n            <Dropdown\n                label={'Export type'}\n                options={options}\n                responsiveMode={ResponsiveMode.large}\n                selectedKey={this.props.value}\n                onChange={(_, option) => this.props.onChange(option.key as ExportType)}\n            />\n        );\n    }\n}","import {Store} from '../Store';\nimport * as React from 'react';\nimport {connect} from '../connect';\nimport {ExportTypeDropdown} from './ExportTypeDropdown';\nimport {DelimiterInput} from './DelimiterInput';\nimport {NewlineDropdown} from './NewlineDropdown';\nimport {\n    PrimaryButton,\n    Text,\n    TextField,\n    Toggle,\n    TooltipHost,\n} from 'office-ui-fabric-react';\nimport {CsvStringAndName, ExportOptions, NewlineSequence} from '../Parser';\nimport * as FileSaver from 'file-saver';\nimport {EncodingDropdown} from './EncodingDropdown';\nimport {ProgressBar} from './ProgressBar';\nimport * as style from './style.css';\nimport {BottomBar} from './BottomBar';\nimport {ParserOutputBox} from './ParserOutputBox';\nimport {StoredComponent} from './StoredComponent';\nimport {MemoryHistory} from 'history';\nimport {TitleBar} from './TitleBar';\n\nexport interface OutputText {\n    // If show is false, do not show text.\n    show: boolean;\n    text: string;\n}\n\ninterface Props {\n    store: Store;\n    history: MemoryHistory;\n}\n\nexport enum ExportType {file, text}\n\ninterface State extends ExportOptions {\n    exportType: ExportType;\n    outputText: OutputText;\n    encoding: string;\n}\n\nexport class ExportComponent extends StoredComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props, 'export', {\n            exportType: ExportType.file,\n            delimiter: '\\u002c',\n            newline: NewlineSequence.CRLF,\n            encoding: 'UTF-8',\n            outputText: {\n                show: false,\n                text: '',\n            },\n        }, ['exportType', 'delimiter', 'newline', 'encoding']);\n    }\n\n    public render(): React.ReactNode {\n        const outputTextField = (\n            <TextField\n                label={'Export result'}\n                className={style.monospace}\n                readOnly={true}\n                multiline rows={15}\n                spellCheck={false}\n                wrap='off'\n                value={this.state.outputText.text}\n            />\n        );\n\n        const largeFileWarning = (\n            <Text style={{color: 'red'}} variant='medium'>\n                {'Large file export is not supported'}\n            </Text>\n        );\n\n        const helpLink = 'https://github.com/Emurasoft/excel-csv-import-help/blob/master/en.md'\n                       + '#export-csv';\n\n        return (\n            <>\n                <div className={style.pageMargin}>\n                    <TitleBar\n                        text={'Export CSV'}\n                        helpLink={helpLink}\n                        // eslint-disable-next-line no-undef\n                        mac={this.props.store.state.platform === Office.PlatformType.Mac}\n                    />\n                    <ExportTypeDropdown\n                        enableFileExport={Store.enableFileExport(this.props.store.state.platform)}\n                        value={this.exportTypeDropdownValue()}\n                        onChange={(exportType) => this.setState({exportType})}\n                    />\n                    <br />\n                    <EncodingDropdown\n                        value={this.state.encoding}\n                        onChange={(encoding) => this.setState({encoding})}\n                        hidden={this.state.exportType === ExportType.text}\n                        showAutoDetect={false}\n                    />\n                    <DelimiterInput\n                        value={this.state.delimiter}\n                        onChange={(delimiter) => this.setState({delimiter})}\n                        showLengthError={false}\n                    />\n                    <br />\n                    <NewlineDropdown\n                        value={this.state.newline}\n                        onChange={(newline) => this.setState({newline})}\n                        showAutoDetect={false}\n                    />\n                    <br />\n                    <TooltipHost\n                        styles={{root: {display: 'inline-block'}}}\n                        content={this.buttonTooltipContent()}\n                    >\n                        <PrimaryButton\n                            onClick={this.buttonOnClick}\n                            disabled={this.buttonTooltipContent() !== ''}\n                            text={'Export to CSV'}\n                        />\n                    </TooltipHost>\n                    <br />\n                    {this.props.store.state.largeFile ? largeFileWarning : null}\n                    <ProgressBar\n                        onClick={this.props.store.abort}\n                        progress={this.props.store.state.progress}\n                    />\n                    <Toggle\n                        inlineLabel label={'Save options'}\n                        defaultChecked={this.initialSaveStatus()}\n                        onChange={(_, checked) => this.setSaveStatus(checked)}\n                    />\n                    {this.state.outputText.show ? outputTextField : null}\n                    <ParserOutputBox parserOutput={this.props.store.state.parserOutput} />\n                    <BottomBar />\n                </div>\n            </>\n        );\n    }\n\n    private exportTypeDropdownValue = (): ExportType => {\n        if (Store.enableFileExport(this.props.store.state.platform)) {\n            return this.state.exportType\n        } else {\n            return ExportType.text;\n        }\n    }\n\n    private buttonOnClick = async () => {\n        function newOutputText(state, exportOptions): OutputText {\n            // If exportType is text:\n            //      If last outputText.show was true, flip twice otherwise change once later\n            // If exportType is a file, show is set to false once.\n            if (exportOptions.exportType === ExportType.text) {\n                if (exportOptions.outputText.show) {\n                    return {show: !state.outputText.show, text: state.outputText.text};\n                } else {\n                    return {show: state.outputText.show, text: state.outputText.text};\n                }\n            } else {\n                return {show: false, text: ''};\n            }\n        }\n\n        // Copy values before async operation\n        const exportOptions = {...this.state};\n\n        // If export is disabled, displayed export type is always text regardless of state. That is\n        // why the state is ignored here.\n        if (!Store.enableFileExport(this.props.store.state.platform)) {\n            exportOptions.exportType = ExportType.text;\n        }\n\n        this.setState(state => ({outputText: newOutputText(state, exportOptions)}));\n\n        const csvStringAndName = await this.props.store.csvStringAndName(this.state);\n        if (csvStringAndName === null) {\n            return;\n        }\n\n        this.saveOrOutput(csvStringAndName, exportOptions);\n    }\n\n    private saveOrOutput(csvStringAndName: CsvStringAndName, exportOptions: State): void {\n        switch (exportOptions.exportType) {\n        case ExportType.file: {\n            const options = {type: 'text/csv;charset=' + exportOptions.encoding};\n            const blob = new Blob([csvStringAndName.string], options);\n            FileSaver.saveAs(blob, csvStringAndName.name + '.csv');\n            // state.outputText.show is already false\n            return;\n        }\n        case ExportType.text: {\n            this.setState(state => ({\n                outputText: {show: !state.outputText.show, text: csvStringAndName.string},\n            }));\n            return;\n        }\n        }\n    }\n\n    private buttonTooltipContent(): string {\n        if (!this.props.store.state.initialized) {\n            return 'Excel API is not initialized';\n        } else {\n            return '';\n        }\n    }\n}\n\nexport default connect(ExportComponent);"],"sourceRoot":""}