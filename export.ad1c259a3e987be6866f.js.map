{"version":3,"sources":["webpack:///./node_modules/file-saver/dist/FileSaver.min.js","webpack:///./src/components/ExportTypeDropdown.tsx","webpack:///./src/components/Export.tsx"],"names":["global","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","c","b","d","e","XMLHttpRequest","open","responseType","onload","a","response","onerror","console","error","send","status","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","f","self","saveAs","HTMLAnchorElement","prototype","g","h","i","URL","webkitURL","j","createElement","name","download","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","navigator","msSaveOrOpenBlob","autoBom","warn","test","type","Blob","title","body","innerText","HTMLElement","safari","userAgent","FileReader","onloadend","result","replace","readAsDataURL","k","l","module","exports","apply","ExportType","ExportTypeDropdown_ExportTypeDropdownComponent","_React$Component","ExportTypeDropdownComponent","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","arguments","_inherits","react","key","value","options","_this","t","props","textOption","text","enableFileExport","file","Dropdown","label","responsiveMode","withResponsiveMode","large","selectedKey","onChange","_","option","ExportTypeDropdown","Object","es","Export_ExportComponent","_StoredComponent","ExportComponent","Export_classCallCheck","Export_possibleConstructorReturn","Export_getPrototypeOf","call","exportType","delimiter","newline","Parser","CRLF","encoding","outputText","show","exportTypeDropdownValue","Store","store","state","platform","buttonOnClick","_asyncToGenerator","regeneratorRuntime","mark","_callee","newOutputText","exportOptions","csvStringAndName","wrap","_context","prev","next","assign","setState","sent","abrupt","saveOrOutput","stop","Export_inherits","StoredComponent","_this2","outputTextField","TextField","className","style","readOnly","multiline","rows","spellCheck","largeFileWarning","Text","color","variant","MenuBar","hidden","Office","PlatformType","iOS","onClick","page","history","push","TitleBar","helpLink","mac","Mac","EncodingDropdown","showAutoDetect","DelimiterInput","showLengthError","NewlineDropdown","TooltipHost","styles","root","display","content","buttonTooltipContent","PrimaryButton","disabled","largeFile","ProgressBar","abort","progress","Toggle","inlineLabel","defaultChecked","initialSaveStatus","checked","setSaveStatus","ParserOutputBox","parserOutput","BottomBar","blob","string","FileSaver_min","initialized","__webpack_exports__","connect"],"mappings":"8EAAA,SAAAA,GAAA,IAAAC,EAAAC,EAAAC,EAAwDD,EAAO,QAAIE,KAAAD,EAAA,mBAAFF,EAAuF,WAAkB,aAA4T,SAAAI,EAAAC,EAAAD,EAAAE,GAAkB,IAAAC,EAAA,IAAAC,eAAyBD,EAAAE,KAAA,MAAAJ,GAAAE,EAAAG,aAAA,OAAAH,EAAAI,OAAA,WAA0DC,EAAAL,EAAAM,SAAAT,EAAAE,IAAkBC,EAAAO,QAAA,WAAsBC,QAAAC,MAAA,4BAAyCT,EAAAU,OAAU,SAAAX,EAAAM,GAAc,IAAAP,EAAA,IAAAG,eAAyB,OAAAH,EAAAI,KAAA,OAAAG,GAAA,GAAAP,EAAAY,OAAA,KAAAZ,EAAAa,QAAA,KAAAb,EAAAa,OAAiE,SAAAX,EAAAK,GAAc,IAAIA,EAAAO,cAAA,IAAAC,WAAA,UAAyC,MAAAhB,GAAS,IAAAC,EAAAgB,SAAAC,YAAA,eAA0CjB,EAAAkB,eAAA,cAAAC,OAAA,gCAAAZ,EAAAO,cAAAd,IAA0F,IAAAoB,EAAA,iBAAAD,sCAAA,iBAAAE,4BAAA,iBAAA3B,uBAAA,EAAAa,EAAAa,EAAAE,SAAA,iBAAAH,iBAAAC,EAAA,aAAqO,aAAAG,kBAAAC,UAAA,SAAAxB,EAAAyB,EAAAC,GAA0D,IAAAC,EAAAP,EAAAQ,KAAAR,EAAAS,UAAAC,EAAAd,SAAAe,cAAA,KAAuDN,KAAAzB,EAAAgC,MAAA,WAAAF,EAAAG,SAAAR,EAAAK,EAAAI,IAAA,4BAAAlC,GAAA8B,EAAAK,KAAAnC,EAAA8B,EAAAM,SAAAC,SAAAD,OAAAlC,EAAA4B,GAAA7B,EAAA6B,EAAAK,MAAApC,EAAAC,EAAAyB,EAAAC,GAAAxB,EAAA4B,IAAAQ,OAAA,YAAAR,EAAAK,KAAAR,EAAAY,gBAAAvC,GAAAwC,WAAA,WAAiNb,EAAAc,gBAAAX,EAAAK,OAA0B,KAAAK,WAAA,WAA4BtC,EAAA4B,IAAK,KAAK,qBAAAY,UAAA,SAAAtB,EAAAK,EAAAC,GAAgD,GAAAD,KAAAL,EAAAY,MAAA,4BAAAZ,EAAAsB,UAAAC,iBAAt7C,SAAApC,EAAAP,GAAgB,gBAAAA,IAAA,CAA+B4C,SAAA,GAAW,iBAAA5C,IAAAU,QAAAmC,KAAA,sDAAA7C,EAAA,CAA4F4C,SAAA5C,IAAWA,EAAA4C,SAAA,6EAAkEE,KAAAvC,EAAAwC,MAAA,IAAAC,KAAA,UAAAzC,GAAA,CAA4DwC,KAAAxC,EAAAwC,OAAYxC,EAA2oCP,CAAAoB,EAAAM,GAAAD,QAAmF,GAAAxB,EAAAmB,GAAArB,EAAAqB,EAAAK,EAAAC,OAAsB,CAAK,IAAAC,EAAAX,SAAAe,cAAA,KAAkCJ,EAAAQ,KAAAf,EAAAO,EAAAW,OAAA,SAAAE,WAAA,WAAiDtC,EAAAyB,OAAQ,SAAApB,EAAAP,EAAAC,EAAAC,GAAmB,IAAAA,KAAAE,KAAA,gBAAAF,EAAAc,SAAAiC,MAAA/C,EAAAc,SAAAkC,KAAAC,UAAA,mCAAA5C,EAAA,OAAAR,EAAAQ,EAAAP,EAAAC,GAA8H,IAAAwB,EAAA,6BAAAlB,EAAAwC,KAAArB,EAAA,eAAAoB,KAAA1B,EAAAgC,cAAAhC,EAAAiC,OAAA1B,EAAA,eAAAmB,KAAAJ,UAAAY,WAAoI,IAAA3B,GAAAF,GAAAC,IAAA,iBAAA6B,WAAA,CAA2C,IAAAzB,EAAA,IAAAyB,WAAqBzB,EAAA0B,UAAA,WAAuB,IAAAjD,EAAAuB,EAAA2B,OAAelD,EAAAoB,EAAApB,IAAAmD,QAAA,eAA6B,yBAAwBxD,IAAAmC,SAAAF,KAAA5B,EAAA8B,SAAA9B,EAAAL,EAAA,MAAyC4B,EAAA6B,cAAApD,OAAoB,CAAK,IAAAqD,EAAAxC,EAAAQ,KAAAR,EAAAS,UAAAgC,EAAAD,EAAArB,gBAAAhC,GAAgDL,IAAAmC,SAAAwB,EAAAxB,SAAAF,KAAA0B,EAAA3D,EAAA,KAAAsC,WAAA,WAA4DoB,EAAAnB,gBAAAoB,IAAqB,QAASzC,EAAAE,OAAAf,EAAAe,OAAAf,EAA8CuD,EAAAC,QAAAxD,IAA75EZ,EAAAqE,MAAAD,EAAAnE,GAAAD,KAAAmE,EAAAC,QAAAlE,65BCa5D,ICyBKoE,EDzBCC,EAAb,SAAAC,GAAA,SAAAC,IAAA,mGAAAC,CAAAC,KAAAF,GAAAG,EAAAD,KAAAE,EAAAJ,GAAAJ,MAAAM,KAAAG,sBAAA,yOAAAC,CAAAN,EAAiDO,EAAA,gBAAjDP,KAAA,EAAAQ,IAAA,SAAAC,MAAA,WACiB,IAQLC,EARKC,EAAAT,KACHU,EAAIV,KAAKW,MAAMD,EAEfE,EAA8B,CAChCN,IAAKX,EAAWkB,KAChBA,KAAMH,EAAE,YAgBZ,OAXIF,EADAR,KAAKW,MAAMG,iBACD,CACN,CACIR,IAAKX,EAAWoB,KAChBF,KAAMH,EAAE,SAEZE,GAGM,CAACA,GAIXP,EAAA,cAACW,EAAA,EAAQ,CACLC,MAAOP,EAAE,eACTF,QAASA,EACTU,eAAgBC,EAAA,eAAeC,MAC/BC,YAAarB,KAAKW,MAAMJ,MACxBe,SAAU,SAACC,EAAGC,GAAJ,OAAef,EAAKE,MAAMW,SAASE,EAAOlB,wCA5BpER,EAAA,GAmCa2B,EAAqBC,OAAAC,EAAA,EAAAD,CAAgB,eAAhBA,CAAgC9B,k1CCVlE,SAAYD,GAAYA,IAAA,eAAMA,IAAA,eAA9B,CAAYA,MAAU,KAQf,IAAMiC,EAAb,SAAAC,GACI,SAAAC,EAAmBnB,GAAY,IAAAF,EAAA,mGAAAsB,CAAA/B,KAAA8B,IAC3BrB,EAAAuB,EAAAhC,KAAAiC,EAAAH,GAAAI,KAAAlC,KAAMW,EAAO,SAAU,CACnBwB,WAAYxC,EAAWoB,KACvBqB,UAAW,IACXC,QAASC,EAAA,EAAgBC,KACzBC,SAAU,QACVC,WAAY,CACRC,MAAM,EACN7B,KAAM,KAEX,CAAC,aAAc,YAAa,UAAW,eA6FtC8B,wBAA0B,WAC9B,OAAIC,EAAA,EAAM9B,iBAAiBL,EAAKE,MAAMkC,MAAMC,MAAMC,UACvCtC,EAAKqC,MAAMX,WAEXxC,EAAWkB,MAIlBJ,EAAAuC,cAAAC,EAAAC,mBAAAC,KAAgB,SAAAC,IAAA,IACXC,EADWC,EAAAC,EAAA,OAAAL,mBAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXN,EADW,SACGP,EAAOQ,GAI1B,OAAIA,EAAcnB,aAAexC,EAAWkB,KACpCyC,EAAcb,WAAWC,KAClB,CAACA,MAAOI,EAAML,WAAWC,KAAM7B,KAAMiC,EAAML,WAAW5B,MAEtD,CAAC6B,KAAMI,EAAML,WAAWC,KAAM7B,KAAMiC,EAAML,WAAW5B,MAGzD,CAAC6B,MAAM,EAAO7B,KAAM,KAK7ByC,EAAa5B,OAAAkC,OAAA,GAAOnD,EAAKqC,OAI1BF,EAAA,EAAM9B,iBAAiBL,EAAKE,MAAMkC,MAAMC,MAAMC,YAC/CO,EAAcnB,WAAaxC,EAAWkB,MAG1CJ,EAAKoD,SAAS,SAAAf,GAAK,MAAK,CAACL,WAAYY,EAAcP,EAAOQ,MAzBtCG,EAAAE,KAAA,EA2BWlD,EAAKE,MAAMkC,MAAMU,iBAAiB9C,EAAKqC,OA3BlD,UA4BK,QADnBS,EA3BcE,EAAAK,MAAA,CAAAL,EAAAE,KAAA,eAAAF,EAAAM,OAAA,iBAgCpBtD,EAAKuD,aAAaT,EAAkBD,GAhChB,yBAAAG,EAAAQ,SAAAb,MA/GO3C,YADnC,yOAAAyD,CAAApC,EAAqCqC,EAAA,QAArCrC,KAAA,EAAAxB,IAAA,SAAAC,MAAA,WAciB,IAAA6D,EAAApE,KACHU,EAAIV,KAAKW,MAAMD,EACf2D,EACFhE,EAAA,cAACiE,EAAA,EAAS,CACNrD,MAAOP,EAAE,iBACT6D,UAAWC,EAAA,UACXC,UAAU,EACVC,WAAS,EAACC,KAAM,GAChBC,YAAY,EACZpB,KAAK,MACLjD,MAAOP,KAAK8C,MAAML,WAAW5B,OAI/BgE,EACFxE,EAAA,cAACyE,EAAA,EAAI,CAACN,MAAO,CAACO,MAAO,OAAQC,QAAQ,UAChCtE,EAAE,uCAOX,OACIL,EAAA,cAAAA,EAAA,cACIA,EAAA,cAAC4E,EAAA,GAEGC,OAAQlF,KAAKW,MAAMkC,MAAMC,MAAMC,WAAaoC,OAAOC,aAAaC,IAChEC,QAAS,SAACC,GAAD,OAAUnB,EAAKzD,MAAM6E,QAAQC,KAAKF,MAE/ClF,EAAA,qBAAKkE,UAAWC,EAAA,YACZnE,EAAA,cAACqF,EAAA,EAAQ,CACL7E,KAAMH,EAAE,cACRiF,SAbC,kFAeDC,IAAK5F,KAAKW,MAAMkC,MAAMC,MAAMC,WAAaoC,OAAOC,aAAaS,MAEjExF,EAAA,cAACoB,EAAkB,CACfX,iBAAkB8B,EAAA,EAAM9B,iBAAiBd,KAAKW,MAAMkC,MAAMC,MAAMC,UAChExC,MAAOP,KAAK2C,0BACZrB,SAAU,SAACa,GAAD,OAAgBiC,EAAKP,SAAS,CAAC1B,kBAE7C9B,EAAA,yBACAA,EAAA,cAACyF,EAAA,EAAgB,CACbvF,MAAOP,KAAK8C,MAAMN,SAClBlB,SAAU,SAACkB,GAAD,OAAc4B,EAAKP,SAAS,CAACrB,cACvC0C,OAAQlF,KAAK8C,MAAMX,aAAexC,EAAWkB,KAC7CkF,gBAAgB,IAEpB1F,EAAA,cAAC2F,EAAA,EAAc,CACXzF,MAAOP,KAAK8C,MAAMV,UAClBd,SAAU,SAACc,GAAD,OAAegC,EAAKP,SAAS,CAACzB,eACxC6D,iBAAiB,IAErB5F,EAAA,yBACAA,EAAA,cAAC6F,EAAA,EAAe,CACZ3F,MAAOP,KAAK8C,MAAMT,QAClBf,SAAU,SAACe,GAAD,OAAa+B,EAAKP,SAAS,CAACxB,aACtC0D,gBAAgB,IAEpB1F,EAAA,yBACAA,EAAA,cAAC8F,EAAA,EAAW,CACRC,OAAQ,CAACC,KAAM,CAACC,QAAS,iBACzBC,QAASvG,KAAKwG,wBAEdnG,EAAA,cAACoG,EAAA,EAAa,CACVnB,QAAStF,KAAKgD,cACd0D,SAA0C,KAAhC1G,KAAKwG,uBACf3F,KAAMH,EAAE,oBAGhBL,EAAA,yBACCL,KAAKW,MAAMkC,MAAMC,MAAM6D,UAAY9B,EAAmB,KACvDxE,EAAA,cAACuG,EAAA,EAAW,CACRtB,QAAStF,KAAKW,MAAMkC,MAAMgE,MAC1BC,SAAU9G,KAAKW,MAAMkC,MAAMC,MAAMgE,WAErCzG,EAAA,cAAC0G,EAAA,EAAM,CACHC,aAAW,EAAC/F,MAAOP,EAAE,gBACrBuG,eAAgBjH,KAAKkH,oBACrB5F,SAAU,SAACC,EAAG4F,GAAJ,OAAgB/C,EAAKgD,cAAcD,MAEhDnH,KAAK8C,MAAML,WAAWC,KAAO2B,EAAkB,KAChDhE,EAAA,cAACgH,EAAA,EAAe,CAACC,aAActH,KAAKW,MAAMkC,MAAMC,MAAMwE,eACtDjH,EAAA,cAACkH,EAAA,EAAS,UAlG9B,CAAAjH,IAAA,eAAAC,MAAA,SAmJyBgD,EAAoCD,GACrD,OAAQA,EAAcnB,YACtB,KAAKxC,EAAWoB,KACZ,IAAMP,EAAU,CAAC/B,KAAM,oBAAsB6E,EAAcd,UACrDgF,EAAO,IAAI9I,KAAK,CAAC6E,EAAiBkE,QAASjH,GAGjD,YAFAkH,EAAA,OAAiBF,EAAMjE,EAAiB7F,KAAO,QAInD,KAAKiC,EAAWkB,KAIZ,YAHAb,KAAK6D,SAAS,SAAAf,GAAK,MAAK,CACpBL,WAAY,CAACC,MAAOI,EAAML,WAAWC,KAAM7B,KAAM0C,EAAiBkE,cA9JlF,CAAAnH,IAAA,uBAAAC,MAAA,WAsKQ,OAAKP,KAAKW,MAAMkC,MAAMC,MAAM6E,YAGjB,GAFA3H,KAAKW,MAAMD,EAAE,gEAvKhCoB,EAAA,GA8Ke8F,EAAA,QAAAlG,OAAAC,EAAA,EAAAD,CAAgB,eAAhB,CAAgCA,OAAAmG,EAAA,EAAAnG,CAAQE","file":"export.ad1c259a3e987be6866f.js","sourcesContent":["(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(b,c,d){var e=new XMLHttpRequest;e.open(\"GET\",b),e.responseType=\"blob\",e.onload=function(){a(e.response,c,d)},e.onerror=function(){console.error(\"could not download file\")},e.send()}function d(a){var b=new XMLHttpRequest;return b.open(\"HEAD\",a,!1),b.send(),200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(a,b,d,e){if(e=e||open(\"\",\"_blank\"),e&&(e.document.title=e.document.body.innerText=\"downloading...\"),\"string\"==typeof a)return c(a,b,d);var g=\"application/octet-stream\"===a.type,h=/constructor/i.test(f.HTMLElement)||f.safari,i=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((i||g&&h)&&\"object\"==typeof FileReader){var j=new FileReader;j.onloadend=function(){var a=j.result;a=i?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),e?e.location.href=a:location=a,e=null},j.readAsDataURL(a)}else{var k=f.URL||f.webkitURL,l=k.createObjectURL(a);e?e.location=l:location.href=l,e=null,setTimeout(function(){k.revokeObjectURL(l)},4E4)}});f.saveAs=a.saveAs=a,\"undefined\"!=typeof module&&(module.exports=a)});\n\n//# sourceMappingURL=FileSaver.min.js.map","import * as React from 'react';\nimport {BaseProps} from './BaseProps';\nimport {Dropdown, IDropdownOption} from 'office-ui-fabric-react';\nimport {\n    ResponsiveMode,\n} from 'office-ui-fabric-react/lib-commonjs/utilities/decorators/withResponsiveMode';\nimport {withTranslation} from 'react-i18next';\nimport {ExportType} from './Export';\n\ninterface Props extends BaseProps<ExportType> {\n    enableFileExport: boolean;\n}\n\nexport class ExportTypeDropdownComponent extends React.Component<Props, {}> {\n    public render(): React.ReactNode {\n        const t = this.props.t;\n\n        const textOption: IDropdownOption = {\n            key: ExportType.text,\n            text: t('Textbox'),\n        }\n\n        let options: IDropdownOption[];\n        if (this.props.enableFileExport) {\n            options = [\n                {\n                    key: ExportType.file,\n                    text: t('File'),\n                },\n                textOption,\n            ];\n        } else {\n            options = [textOption];\n        }\n\n        return (\n            <Dropdown\n                label={t('Export type')}\n                options={options}\n                responsiveMode={ResponsiveMode.large}\n                selectedKey={this.props.value}\n                onChange={(_, option) => this.props.onChange(option.key as ExportType)}\n            />\n        );\n    }\n}\n\n// @ts-ignore\nexport const ExportTypeDropdown = withTranslation('importExport')(ExportTypeDropdownComponent);","import {Store} from '../Store';\nimport * as React from 'react';\nimport {connect} from '../connect';\nimport {ExportTypeDropdown} from './ExportTypeDropdown';\nimport {DelimiterInput} from './DelimiterInput';\nimport {NewlineDropdown} from './NewlineDropdown';\nimport {\n    PrimaryButton,\n    Text,\n    TextField,\n    Toggle,\n    TooltipHost,\n} from 'office-ui-fabric-react';\nimport {CsvStringAndName, ExportOptions, NewlineSequence} from '../Parser';\nimport * as FileSaver from 'file-saver';\nimport {EncodingDropdown} from './EncodingDropdown';\nimport {ProgressBar} from './ProgressBar';\nimport * as style from './style.css';\nimport {BottomBar} from './BottomBar';\nimport {ParserOutputBox} from './ParserOutputBox';\nimport {StoredComponent} from './StoredComponent';\nimport {TranslateFunction} from './BaseProps';\nimport {withTranslation} from 'react-i18next';\nimport {MenuBar} from './MenuBar';\nimport {MemoryHistory} from 'history';\nimport {TitleBar} from './TitleBar';\n\nexport interface OutputText {\n    // If show is false, do not show text.\n    show: boolean;\n    text: string;\n}\n\ninterface Props extends TranslateFunction {\n    store: Store;\n    history: MemoryHistory;\n}\n\nexport enum ExportType {file, text}\n\ninterface State extends ExportOptions {\n    exportType: ExportType;\n    outputText: OutputText;\n    encoding: string;\n}\n\nexport class ExportComponent extends StoredComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props, 'export', {\n            exportType: ExportType.file,\n            delimiter: '\\u002c',\n            newline: NewlineSequence.CRLF,\n            encoding: 'UTF-8',\n            outputText: {\n                show: false,\n                text: '',\n            },\n        }, ['exportType', 'delimiter', 'newline', 'encoding']);\n    }\n\n    public render(): React.ReactNode {\n        const t = this.props.t;\n        const outputTextField = (\n            <TextField\n                label={t('Export result')}\n                className={style.monospace}\n                readOnly={true}\n                multiline rows={15}\n                spellCheck={false}\n                wrap='off'\n                value={this.state.outputText.text}\n            />\n        );\n\n        const largeFileWarning = (\n            <Text style={{color: 'red'}} variant='medium'>\n                {t('Large file export is not supported')}\n            </Text>\n        );\n\n        const helpLink = 'https://github.com/Emurasoft/excel-csv-import-help/blob/master/en.md'\n                       + '#export-csv';\n\n        return (\n            <>\n                <MenuBar\n                    // eslint-disable-next-line no-undef\n                    hidden={this.props.store.state.platform !== Office.PlatformType.iOS}\n                    onClick={(page) => this.props.history.push(page)}\n                />\n                <div className={style.pageMargin}>\n                    <TitleBar\n                        text={t('Export CSV')}\n                        helpLink={helpLink}\n                        // eslint-disable-next-line no-undef\n                        mac={this.props.store.state.platform === Office.PlatformType.Mac}\n                    />\n                    <ExportTypeDropdown\n                        enableFileExport={Store.enableFileExport(this.props.store.state.platform)}\n                        value={this.exportTypeDropdownValue()}\n                        onChange={(exportType) => this.setState({exportType})}\n                    />\n                    <br />\n                    <EncodingDropdown\n                        value={this.state.encoding}\n                        onChange={(encoding) => this.setState({encoding})}\n                        hidden={this.state.exportType === ExportType.text}\n                        showAutoDetect={false}\n                    />\n                    <DelimiterInput\n                        value={this.state.delimiter}\n                        onChange={(delimiter) => this.setState({delimiter})}\n                        showLengthError={false}\n                    />\n                    <br />\n                    <NewlineDropdown\n                        value={this.state.newline}\n                        onChange={(newline) => this.setState({newline})}\n                        showAutoDetect={false}\n                    />\n                    <br />\n                    <TooltipHost\n                        styles={{root: {display: 'inline-block'}}}\n                        content={this.buttonTooltipContent()}\n                    >\n                        <PrimaryButton\n                            onClick={this.buttonOnClick}\n                            disabled={this.buttonTooltipContent() !== ''}\n                            text={t('Export to CSV')}\n                        />\n                    </TooltipHost>\n                    <br />\n                    {this.props.store.state.largeFile ? largeFileWarning : null}\n                    <ProgressBar\n                        onClick={this.props.store.abort}\n                        progress={this.props.store.state.progress}\n                    />\n                    <Toggle\n                        inlineLabel label={t('Save options')}\n                        defaultChecked={this.initialSaveStatus()}\n                        onChange={(_, checked) => this.setSaveStatus(checked)}\n                    />\n                    {this.state.outputText.show ? outputTextField : null}\n                    <ParserOutputBox parserOutput={this.props.store.state.parserOutput} />\n                    <BottomBar />\n                </div>\n            </>\n        );\n    }\n\n    private exportTypeDropdownValue = (): ExportType => {\n        if (Store.enableFileExport(this.props.store.state.platform)) {\n            return this.state.exportType\n        } else {\n            return ExportType.text;\n        }\n    }\n\n    private buttonOnClick = async () => {\n        function newOutputText(state, exportOptions): OutputText {\n            // If exportType is text:\n            //      If last outputText.show was true, flip twice otherwise change once later\n            // If exportType is a file, show is set to false once.\n            if (exportOptions.exportType === ExportType.text) {\n                if (exportOptions.outputText.show) {\n                    return {show: !state.outputText.show, text: state.outputText.text};\n                } else {\n                    return {show: state.outputText.show, text: state.outputText.text};\n                }\n            } else {\n                return {show: false, text: ''};\n            }\n        }\n\n        // Copy values before async operation\n        const exportOptions = {...this.state};\n\n        // If export is disabled, displayed export type is always text regardless of state. That is\n        // why the state is ignored here.\n        if (!Store.enableFileExport(this.props.store.state.platform)) {\n            exportOptions.exportType = ExportType.text;\n        }\n\n        this.setState(state => ({outputText: newOutputText(state, exportOptions)}));\n\n        const csvStringAndName = await this.props.store.csvStringAndName(this.state);\n        if (csvStringAndName === null) {\n            return;\n        }\n\n        this.saveOrOutput(csvStringAndName, exportOptions);\n    }\n\n    private saveOrOutput(csvStringAndName: CsvStringAndName, exportOptions: State): void {\n        switch (exportOptions.exportType) {\n        case ExportType.file: {\n            const options = {type: 'text/csv;charset=' + exportOptions.encoding};\n            const blob = new Blob([csvStringAndName.string], options);\n            FileSaver.saveAs(blob, csvStringAndName.name + '.csv');\n            // state.outputText.show is already false\n            return;\n        }\n        case ExportType.text: {\n            this.setState(state => ({\n                outputText: {show: !state.outputText.show, text: csvStringAndName.string},\n            }));\n            return;\n        }\n        }\n    }\n\n    private buttonTooltipContent(): string {\n        if (!this.props.store.state.initialized) {\n            return this.props.t('Excel API is not initialized');\n        } else {\n            return '';\n        }\n    }\n}\n\nexport default withTranslation('importExport')(connect(ExportComponent));"],"sourceRoot":""}