{"version":3,"sources":["webpack:///./src/components/SourceInput.tsx","webpack:///./src/components/Import.tsx"],"names":["SourceInput_SourceInputComponent","_React$Component","SourceInputComponent","_this","_classCallCheck","this","dropdownOnChange","_","option","props","onChange","inputType","key","file","text","fileOnChange","e","Parser","target","files","_inherits","react","value","_componentMap","_this2","t","fileSourceMenu","componentMap","_defineProperty","className","style","type","accept","id","TextField","multiline","rows","spellCheck","wrap","Dropdown","label","options","responsiveMode","withResponsiveMode","large","selectedKey","SourceInput","Object","es","Import_ImportComponent","_StoredComponent","ImportComponent","Import_classCallCheck","Import_possibleConstructorReturn","Import_getPrototypeOf","call","source","delimiter","newline","AutoDetect","encoding","buttonOnClick","_asyncToGenerator","regeneratorRuntime","mark","_callee","_context","prev","next","store","import","state","stop","Import_inherits","StoredComponent","MenuBar","hidden","navigator","platform","onClick","page","history","push","Text","variant","setState","EncodingDropdown","showAutoDetect","DelimiterInput","showLengthError","NewlineDropdown","TooltipHost","styles","root","display","content","buttonTooltipContent","delay","Tooltip_types","zero","PrimaryButton","disabled","ProgressBar","abort","progress","Toggle","inlineLabel","defaultChecked","initialSaveStatus","checked","setSaveStatus","ParserOutputBox","parserOutput","BottomBar","length","initialized","__webpack_exports__","connect"],"mappings":"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","file":"import.70b42d15bad317a9a6a4.js","sourcesContent":["import * as React from 'react';\nimport {InputType, Source} from '../Parser';\nimport * as style from './style.css';\nimport {Dropdown, IDropdownOption, TextField} from 'office-ui-fabric-react';\nimport {\n    ResponsiveMode,\n} from 'office-ui-fabric-react/lib-commonjs/utilities/decorators/withResponsiveMode';\nimport {BaseProps} from './BaseProps';\nimport {withTranslation} from 'react-i18next';\n\nexport class SourceInputComponent extends React.Component<BaseProps<Source>, {}> {\n    public render(): React.ReactNode {\n        const t = this.props.t;\n        const fileSourceMenu: IDropdownOption[] = [\n            {\n                key: InputType.file,\n                text: t('File'),\n            },\n            {\n                key: InputType.text,\n                text: t('Text input'),\n            },\n        ];\n\n        const componentMap = {\n            [InputType.file]: (\n                <>\n                    <input\n                        className={style.fullWidth}\n                        type='file'\n                        accept='text/csv'\n                        onChange={this.fileOnChange}\n                        id='SourceInput-FileInput'\n                    />\n                    <br />\n                </>\n            ),\n            [InputType.text]: (\n                <TextField\n                    className={style.monospace}\n                    multiline rows={10}\n                    spellCheck={false}\n                    wrap='off'\n                    onChange={(_, text) => this.props.onChange({inputType: InputType.text, text})}\n                    value={this.props.value.text as string}\n                    id='SourceInput-TextInput'\n                />\n            ),\n        };\n\n        return (\n            <>\n                <Dropdown\n                    label={t('Import type')}\n                    options={fileSourceMenu}\n                    responsiveMode={ResponsiveMode.large}\n                    selectedKey={this.props.value.inputType}\n                    onChange={this.dropdownOnChange}\n                    id='SourceInput-Dropdown'\n                />\n                <div className={style.smallDivider} />\n                {componentMap[this.props.value.inputType]}\n            </>\n        );\n    }\n\n    private dropdownOnChange = (_, option) => {\n        this.props.onChange({inputType: option.key as InputType, file: null, text: ''});\n    }\n\n    private fileOnChange =(e) => {\n        this.props.onChange({inputType: InputType.file, file: e.target.files[0], text: ''});\n    }\n}\n\n// @ts-ignore\nexport const SourceInput = withTranslation('importExport')(SourceInputComponent);","import {Store} from '../Store';\nimport * as React from 'react';\nimport {connect} from '../connect';\nimport {PrimaryButton, Toggle, TooltipDelay, TooltipHost, Text} from 'office-ui-fabric-react';\nimport {ImportOptions, InputType, NewlineSequence} from '../Parser';\nimport {SourceInput} from './SourceInput';\nimport {DelimiterInput} from './DelimiterInput';\nimport {NewlineDropdown} from './NewlineDropdown';\nimport {EncodingDropdown} from './EncodingDropdown';\nimport {ProgressBar} from './ProgressBar';\nimport * as style from './style.css';\nimport {BottomBar} from './BottomBar';\nimport {ParserOutputBox} from './ParserOutputBox';\nimport {StoredComponent} from './StoredComponent';\nimport {withTranslation} from 'react-i18next';\nimport {TranslateFunction} from './BaseProps';\nimport {MenuBar} from './MenuBar';\nimport {MemoryHistory} from 'history';\n\ninterface Props extends TranslateFunction {\n    store: Store;\n    history: MemoryHistory;\n}\n\nexport class ImportComponent extends StoredComponent<Props, ImportOptions> {\n    public constructor(props: Props) {\n        super(props, 'import', {\n            source: {inputType: InputType.file, file: null, text: ''},\n            delimiter: '',\n            newline: NewlineSequence.AutoDetect,\n            encoding: '',\n        }, ['delimiter', 'newline', 'encoding']);\n    }\n\n    public render(): React.ReactNode {\n        const t = this.props.t;\n        return (\n            <>\n                <MenuBar\n                    hidden={navigator.platform !== 'iPad'}\n                    onClick={(page) => this.props.history.push(page)}\n                />\n                <div className={style.pageMargin}>\n                    <Text variant='xLarge'><strong>{t('Import CSV')}</strong></Text>\n                    <SourceInput\n                        value={this.state.source}\n                        onChange={(source) => this.setState({source})}\n                    />\n                    <br />\n                    <EncodingDropdown\n                        value={this.state.encoding}\n                        onChange={(encoding) => this.setState({encoding})}\n                        hidden={this.state.source.inputType === InputType.text}\n                        showAutoDetect={true}\n                    />\n                    <DelimiterInput\n                        value={this.state.delimiter}\n                        onChange={(delimiter) => this.setState({delimiter})}\n                        showAutoDetect={true}\n                        showLengthError={true}\n                    />\n                    <br />\n                    <NewlineDropdown\n                        value={this.state.newline as NewlineSequence}\n                        onChange={(newline) => this.setState({newline})}\n                        showAutoDetect={true}\n                    />\n                    <br />\n                    <TooltipHost\n                        styles={{root: {display: 'inline-block'}} /* Resize to fit button */}\n                        content={this.buttonTooltipContent()}\n                        delay={TooltipDelay.zero}\n                    >\n                        <PrimaryButton\n                            disabled={this.buttonTooltipContent() !== ''}\n                            onClick={this.buttonOnClick}\n                            text={t('Import CSV')}\n                        />\n                    </TooltipHost>\n                    <br />\n                    <ProgressBar\n                        onClick={this.props.store.abort}\n                        progress={this.props.store.state.progress}\n                    />\n                    <Toggle\n                        inlineLabel label={t('Save options')}\n                        defaultChecked={this.initialSaveStatus()}\n                        onChange={(_, checked) => this.setSaveStatus(checked)}\n                    />\n                    <ParserOutputBox parserOutput={this.props.store.state.parserOutput} />\n                    <BottomBar />\n                </div>\n            </>\n        );\n    }\n\n    private buttonOnClick = async () => {\n        await this.props.store.import(this.state);\n    }\n\n    private buttonTooltipContent(): string {\n        const t = this.props.t;\n        if (this.state.source.inputType == InputType.file && this.state.source.file == null) {\n            return t('Import source is not selected');\n        } else if (this.state.delimiter.length > 1) {\n            return t('Delimiter is invalid');\n        } else if (!this.props.store.state.initialized) {\n            return t('Excel API is not initialized');\n        } else {\n            return '';\n        }\n    }\n}\n\nexport default withTranslation('importExport')(connect(ImportComponent));"],"sourceRoot":""}