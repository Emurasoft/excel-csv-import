{"version":3,"sources":["webpack:///./src/components/SourceInput.tsx","webpack:///./src/components/Import.tsx"],"names":["SourceInput_SourceInput","_React$Component","SourceInput","_this","_classCallCheck","this","dropdownOnChange","_","option","props","onChange","inputType","key","file","text","fileOnChange","e","Parser","target","files","_inherits","react","value","_componentMap","_this2","fileSourceMenu","usingEdgeOrIE","navigator","userAgent","includes","componentMap","_defineProperty","className","style","type","accept","id","TextField","multiline","rows","spellCheck","wrap","Dropdown","label","options","responsiveMode","withResponsiveMode","large","selectedKey","Import_ImportComponent","_StoredComponent","ImportComponent","Import_classCallCheck","Import_possibleConstructorReturn","Import_getPrototypeOf","call","source","delimiter","newline","AutoDetect","encoding","buttonOnClick","_asyncToGenerator","regeneratorRuntime","mark","_callee","_context","prev","next","store","import","state","stop","Import_inherits","StoredComponent","TitleBar","helpLink","mac","platform","Office","PlatformType","Mac","setState","EncodingDropdown","hidden","showAutoDetect","DelimiterInput","showLengthError","NewlineDropdown","TooltipHost","styles","root","display","content","buttonTooltipContent","delay","Tooltip_types","zero","PrimaryButton","disabled","onClick","ProgressBar","abort","progress","Toggle","inlineLabel","defaultChecked","initialSaveStatus","checked","setSaveStatus","ParserOutputBox","parserOutput","BottomBar","length","initialized","__webpack_exports__","Object","connect"],"mappings":"mmCASO,IAAMA,EAAb,SAAAC,GAAA,SAAAC,IAAA,IAAAC,EAAA,mGAAAC,CAAAC,KAAAH,0CA0DYI,iBAAmB,SAACC,EAAGC,GAC3BL,EAAKM,MAAMC,SAAS,CAACC,UAAWH,EAAOI,IAAkBC,KAAM,KAAMC,KAAM,MAGvEX,EAAAY,aAAc,SAACC,GACnBb,EAAKM,MAAMC,SAAS,CAACC,UAAWM,EAAA,EAAUJ,KAAMA,KAAMG,EAAEE,OAAOC,MAAM,GAAIL,KAAM,MA/DvFX,YAAA,yOAAAiB,CAAAlB,EAAiCmB,EAAA,gBAAjCnB,KAAA,EAAAU,IAAA,SAAAU,MAAA,WACiB,IAAAC,EAAAC,EAAAnB,KACHoB,EAAoC,CACtC,CACIb,IAAKK,EAAA,EAAUJ,KACfC,KAAM,QAEV,CACIF,IAAKK,EAAA,EAAUH,KACfA,KAAM,eAIRY,EAAgBC,UAAUC,UAAUC,SAAS,SAC5CF,UAAUC,UAAUC,SAAS,WAE9BC,GAAYC,EAAAR,EAAA,GACbN,EAAA,EAAUJ,KACPQ,EAAA,cAAAA,EAAA,cACIA,EAAA,uBACIW,UAAWN,EAAgBO,EAAA,UAAkB,KAC7CC,KAAK,OACLC,OAAO,WACPzB,SAAUL,KAAKU,aACfqB,GAAG,0BAEPf,EAAA,2BAVMU,EAAAR,EAabN,EAAA,EAAUH,KACPO,EAAA,cAACgB,EAAA,EAAS,CACNL,UAAWC,EAAA,UACXK,WAAS,EAACC,KAAM,GAChBC,YAAY,EACZC,KAAK,MACL/B,SAAU,SAACH,EAAGO,GAAJ,OAAaU,EAAKf,MAAMC,SAAS,CAACC,UAAWM,EAAA,EAAUH,KAAMA,UACvEQ,MAAOjB,KAAKI,MAAMa,MAAMR,KACxBsB,GAAG,2BArBGb,GA0BlB,OACIF,EAAA,cAAAA,EAAA,cACIA,EAAA,cAACqB,EAAA,EAAQ,CACLC,MAAO,cACPC,QAASnB,EACToB,eAAgBC,EAAA,eAAeC,MAC/BC,YAAa3C,KAAKI,MAAMa,MAAMX,UAC9BD,SAAUL,KAAKC,iBACf8B,GAAG,yBAEPf,EAAA,qBAAKW,UAAWC,EAAA,eACfH,EAAazB,KAAKI,MAAMa,MAAMX,4CArD/CT,EAAA,0tCCaO,IAAM+C,EAAb,SAAAC,GACI,SAAAC,EAAmB1C,GAAY,IAAAN,EAAA,mGAAAiD,CAAA/C,KAAA8C,IAC3BhD,EAAAkD,EAAAhD,KAAAiD,EAAAH,GAAAI,KAAAlD,KAAMI,EAAO,SAAU,CACnB+C,OAAQ,CAAC7C,UAAWM,EAAA,EAAUJ,KAAMA,KAAM,KAAMC,KAAM,IACtD2C,UAAW,IACXC,QAASzC,EAAA,EAAgB0C,WACzBC,SAAU,IACX,CAAC,YAAa,UAAW,eAkExBC,cAAAC,EAAAC,mBAAAC,KAAgB,SAAAC,IAAA,OAAAF,mBAAAtB,KAAA,SAAAyB,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACdjE,EAAKM,MAAM4D,MAAMC,OAAOnE,EAAKoE,OADf,wBAAAL,EAAAM,SAAAP,MAxEO9D,YADnC,yOAAAsE,CAAAtB,EAAqCuB,EAAA,QAArCvB,KAAA,EAAAvC,IAAA,SAAAU,MAAA,WAUiB,IAAAE,EAAAnB,KACT,OACIgB,EAAA,cAAAA,EAAA,cACIA,EAAA,qBAAKW,UAAWC,EAAA,YACZZ,EAAA,cAACsD,EAAA,EAAQ,CACL7D,KAAM,aACN8D,SACI,uEAGJC,IAAKxE,KAAKI,MAAM4D,MAAME,MAAMO,WAAaC,OAAOC,aAAaC,MAEjE5D,EAAA,cAACrB,EAAW,CACRsB,MAAOjB,KAAKkE,MAAMf,OAClB9C,SAAU,SAAC8C,GAAD,OAAYhC,EAAK0D,SAAS,CAAC1B,cAEzCnC,EAAA,yBACAA,EAAA,cAAC8D,EAAA,EAAgB,CACb7D,MAAOjB,KAAKkE,MAAMX,SAClBlD,SAAU,SAACkD,GAAD,OAAcpC,EAAK0D,SAAS,CAACtB,cACvCwB,OAAQ/E,KAAKkE,MAAMf,OAAO7C,YAAcM,EAAA,EAAUH,KAClDuE,gBAAgB,IAEpBhE,EAAA,cAACiE,EAAA,EAAc,CACXhE,MAAOjB,KAAKkE,MAAMd,UAClB/C,SAAU,SAAC+C,GAAD,OAAejC,EAAK0D,SAAS,CAACzB,eACxC8B,iBAAiB,IAErBlE,EAAA,yBACAA,EAAA,cAACmE,EAAA,EAAe,CACZlE,MAAOjB,KAAKkE,MAAMb,QAClBhD,SAAU,SAACgD,GAAD,OAAalC,EAAK0D,SAAS,CAACxB,aACtC2B,gBAAgB,IAEpBhE,EAAA,yBACAA,EAAA,cAACoE,EAAA,EAAW,CACRC,OAAQ,CAACC,KAAM,CAACC,QAAS,iBACzBC,QAASxF,KAAKyF,uBACdC,MAAOC,EAAA,EAAaC,MAEpB5E,EAAA,cAAC6E,EAAA,EAAa,CACVC,SAA0C,KAAhC9F,KAAKyF,uBACfM,QAAS/F,KAAKwD,cACd/C,KAAM,gBAGdO,EAAA,yBACAA,EAAA,cAACgF,EAAA,EAAW,CACRD,QAAS/F,KAAKI,MAAM4D,MAAMiC,MAC1BC,SAAUlG,KAAKI,MAAM4D,MAAME,MAAMgC,WAErClF,EAAA,cAACmF,EAAA,EAAM,CACHC,aAAW,EAAC9D,MAAO,eACnB+D,eAAgBrG,KAAKsG,oBACrBjG,SAAU,SAACH,EAAGqG,GAAJ,OAAgBpF,EAAKqF,cAAcD,MAEjDvF,EAAA,cAACyF,EAAA,EAAe,CAACC,aAAc1G,KAAKI,MAAM4D,MAAME,MAAMwC,eACtD1F,EAAA,cAAC2F,EAAA,EAAS,UAnE9B,CAAApG,IAAA,uBAAAU,MAAA,WA8EQ,OAAIjB,KAAKkE,MAAMf,OAAO7C,WAAaM,EAAA,EAAUJ,MAAkC,MAA1BR,KAAKkE,MAAMf,OAAO3C,KAC5D,gCACgC,IAAhCR,KAAKkE,MAAMd,UAAUwD,OACrB,uBACC5G,KAAKI,MAAM4D,MAAME,MAAM2C,YAGxB,GAFA,+DAnFnB/D,EAAA,GA0FegE,EAAA,QAAAC,OAAAC,EAAA,GAAQpE","file":"import.3b7aaaa3adb6685a681b.js","sourcesContent":["import * as React from 'react';\nimport {InputType, Source} from '../Parser';\nimport * as style from './style.css';\nimport {Dropdown, IDropdownOption, TextField} from 'office-ui-fabric-react';\nimport {\n    ResponsiveMode,\n} from 'office-ui-fabric-react/lib-commonjs/utilities/decorators/withResponsiveMode';\nimport {BaseProps} from './BaseProps';\n\nexport class SourceInput extends React.Component<BaseProps<Source>, {}> {\n    public render(): React.ReactNode {\n        const fileSourceMenu: IDropdownOption[] = [\n            {\n                key: InputType.file,\n                text: 'File',\n            },\n            {\n                key: InputType.text,\n                text: 'Text input',\n            },\n        ];\n\n        const usingEdgeOrIE = navigator.userAgent.includes('Edge')\n            || navigator.userAgent.includes('Trident');\n\n        const componentMap = {\n            [InputType.file]: (\n                <>\n                    <input\n                        className={usingEdgeOrIE ? style.fullWidth : null}\n                        type='file'\n                        accept='text/csv'\n                        onChange={this.fileOnChange}\n                        id='SourceInput-FileInput'\n                    />\n                    <br />\n                </>\n            ),\n            [InputType.text]: (\n                <TextField\n                    className={style.monospace}\n                    multiline rows={10}\n                    spellCheck={false}\n                    wrap='off'\n                    onChange={(_, text) => this.props.onChange({inputType: InputType.text, text})}\n                    value={this.props.value.text as string}\n                    id='SourceInput-TextInput'\n                />\n            ),\n        };\n\n        return (\n            <>\n                <Dropdown\n                    label={'Import type'}\n                    options={fileSourceMenu}\n                    responsiveMode={ResponsiveMode.large}\n                    selectedKey={this.props.value.inputType}\n                    onChange={this.dropdownOnChange}\n                    id='SourceInput-Dropdown'\n                />\n                <div className={style.smallDivider} />\n                {componentMap[this.props.value.inputType]}\n            </>\n        );\n    }\n\n    private dropdownOnChange = (_, option) => {\n        this.props.onChange({inputType: option.key as InputType, file: null, text: ''});\n    }\n\n    private fileOnChange =(e) => {\n        this.props.onChange({inputType: InputType.file, file: e.target.files[0], text: ''});\n    }\n}","import {Store} from '../Store';\nimport * as React from 'react';\nimport {connect} from '../connect';\nimport {PrimaryButton, Toggle, TooltipDelay, TooltipHost} from 'office-ui-fabric-react';\nimport {ImportOptions, InputType, NewlineSequence} from '../Parser';\nimport {SourceInput} from './SourceInput';\nimport {DelimiterInput} from './DelimiterInput';\nimport {NewlineDropdown} from './NewlineDropdown';\nimport {EncodingDropdown} from './EncodingDropdown';\nimport {ProgressBar} from './ProgressBar';\nimport * as style from './style.css';\nimport {BottomBar} from './BottomBar';\nimport {ParserOutputBox} from './ParserOutputBox';\nimport {StoredComponent} from './StoredComponent';\nimport {MemoryHistory} from 'history';\nimport {TitleBar} from './TitleBar';\n\ninterface Props {\n    store: Store;\n    history: MemoryHistory;\n}\n\nexport class ImportComponent extends StoredComponent<Props, ImportOptions> {\n    public constructor(props: Props) {\n        super(props, 'import', {\n            source: {inputType: InputType.file, file: null, text: ''},\n            delimiter: '\\u002c',\n            newline: NewlineSequence.AutoDetect,\n            encoding: '',\n        }, ['delimiter', 'newline', 'encoding']);\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <>\n                <div className={style.pageMargin}>\n                    <TitleBar\n                        text={'Import CSV'}\n                        helpLink={\n                            'https://github.com/Emurasoft/excel-csv-import-help/blob/master/en.md'\n                        }\n                        // eslint-disable-next-line no-undef\n                        mac={this.props.store.state.platform === Office.PlatformType.Mac}\n                    />\n                    <SourceInput\n                        value={this.state.source}\n                        onChange={(source) => this.setState({source})}\n                    />\n                    <br />\n                    <EncodingDropdown\n                        value={this.state.encoding}\n                        onChange={(encoding) => this.setState({encoding})}\n                        hidden={this.state.source.inputType === InputType.text}\n                        showAutoDetect={true}\n                    />\n                    <DelimiterInput\n                        value={this.state.delimiter}\n                        onChange={(delimiter) => this.setState({delimiter})}\n                        showLengthError={true}\n                    />\n                    <br />\n                    <NewlineDropdown\n                        value={this.state.newline as NewlineSequence}\n                        onChange={(newline) => this.setState({newline})}\n                        showAutoDetect={true}\n                    />\n                    <br />\n                    <TooltipHost\n                        styles={{root: {display: 'inline-block'}} /* Resize to fit button */}\n                        content={this.buttonTooltipContent()}\n                        delay={TooltipDelay.zero}\n                    >\n                        <PrimaryButton\n                            disabled={this.buttonTooltipContent() !== ''}\n                            onClick={this.buttonOnClick}\n                            text={'Import CSV'}\n                        />\n                    </TooltipHost>\n                    <br />\n                    <ProgressBar\n                        onClick={this.props.store.abort}\n                        progress={this.props.store.state.progress}\n                    />\n                    <Toggle\n                        inlineLabel label={'Save options'}\n                        defaultChecked={this.initialSaveStatus()}\n                        onChange={(_, checked) => this.setSaveStatus(checked)}\n                    />\n                    <ParserOutputBox parserOutput={this.props.store.state.parserOutput} />\n                    <BottomBar />\n                </div>\n            </>\n        );\n    }\n\n    private buttonOnClick = async () => {\n        await this.props.store.import(this.state);\n    }\n\n    private buttonTooltipContent(): string {\n        if (this.state.source.inputType == InputType.file && this.state.source.file == null) {\n            return 'Import source is not selected';\n        } else if (this.state.delimiter.length !== 1) {\n            return 'Delimiter is invalid';\n        } else if (!this.props.store.state.initialized) {\n            return 'Excel API is not initialized';\n        } else {\n            return '';\n        }\n    }\n}\n\nexport default connect(ImportComponent);"],"sourceRoot":""}