{"version":3,"sources":["webpack:///./src/components/SourceInput.tsx","webpack:///./src/components/Import.tsx"],"names":["SourceInput_SourceInputComponent","_React$Component","SourceInputComponent","_this","_classCallCheck","this","dropdownOnChange","_","option","props","onChange","inputType","key","file","text","fileOnChange","e","Parser","target","files","_inherits","react","value","_componentMap","_this2","t","fileSourceMenu","usingEdgeOrIE","navigator","userAgent","includes","componentMap","_defineProperty","className","style","type","accept","id","TextField","multiline","rows","spellCheck","wrap","Dropdown","label","options","responsiveMode","withResponsiveMode","large","selectedKey","SourceInput","Object","es","Import_ImportComponent","_StoredComponent","ImportComponent","Import_classCallCheck","Import_possibleConstructorReturn","Import_getPrototypeOf","call","source","delimiter","newline","AutoDetect","encoding","buttonOnClick","_asyncToGenerator","regeneratorRuntime","mark","_callee","_context","prev","next","store","import","state","stop","Import_inherits","StoredComponent","MenuBar","hidden","platform","onClick","page","history","push","TitleBar","helpLink","setState","EncodingDropdown","showAutoDetect","DelimiterInput","showLengthError","NewlineDropdown","TooltipHost","styles","root","display","content","buttonTooltipContent","delay","Tooltip_types","zero","PrimaryButton","disabled","ProgressBar","abort","progress","Toggle","inlineLabel","defaultChecked","initialSaveStatus","checked","setSaveStatus","ParserOutputBox","parserOutput","BottomBar","length","initialized","__webpack_exports__","connect"],"mappings":"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","file":"import.585bdd59788c78f19b6e.js","sourcesContent":["import * as React from 'react';\nimport {InputType, Source} from '../Parser';\nimport * as style from './style.css';\nimport {Dropdown, IDropdownOption, TextField} from 'office-ui-fabric-react';\nimport {\n    ResponsiveMode,\n} from 'office-ui-fabric-react/lib-commonjs/utilities/decorators/withResponsiveMode';\nimport {BaseProps} from './BaseProps';\nimport {withTranslation} from 'react-i18next';\n\nexport class SourceInputComponent extends React.Component<BaseProps<Source>, {}> {\n    public render(): React.ReactNode {\n        const t = this.props.t;\n        const fileSourceMenu: IDropdownOption[] = [\n            {\n                key: InputType.file,\n                text: t('File'),\n            },\n            {\n                key: InputType.text,\n                text: t('Text input'),\n            },\n        ];\n        \n        const usingEdgeOrIE = navigator.userAgent.includes('Edge')\n            || navigator.userAgent.includes('Trident');\n        \n        const componentMap = {\n            [InputType.file]: (\n                <>\n                    <input\n                        className={usingEdgeOrIE ? style.fullWidth : null}\n                        type='file'\n                        accept='text/csv'\n                        onChange={this.fileOnChange}\n                        id='SourceInput-FileInput'\n                    />\n                    <br />\n                </>\n            ),\n            [InputType.text]: (\n                <TextField\n                    className={style.monospace}\n                    multiline rows={10}\n                    spellCheck={false}\n                    wrap='off'\n                    onChange={(_, text) => this.props.onChange({inputType: InputType.text, text})}\n                    value={this.props.value.text as string}\n                    id='SourceInput-TextInput'\n                />\n            ),\n        };\n\n        return (\n            <>\n                <Dropdown\n                    label={t('Import type')}\n                    options={fileSourceMenu}\n                    responsiveMode={ResponsiveMode.large}\n                    selectedKey={this.props.value.inputType}\n                    onChange={this.dropdownOnChange}\n                    id='SourceInput-Dropdown'\n                />\n                <div className={style.smallDivider} />\n                {componentMap[this.props.value.inputType]}\n            </>\n        );\n    }\n\n    private dropdownOnChange = (_, option) => {\n        this.props.onChange({inputType: option.key as InputType, file: null, text: ''});\n    }\n\n    private fileOnChange =(e) => {\n        this.props.onChange({inputType: InputType.file, file: e.target.files[0], text: ''});\n    }\n}\n\n// @ts-ignore\nexport const SourceInput = withTranslation('importExport')(SourceInputComponent);","import {Store} from '../Store';\nimport * as React from 'react';\nimport {connect} from '../connect';\nimport {\n    PrimaryButton,\n    Toggle,\n    TooltipDelay,\n    TooltipHost,\n} from 'office-ui-fabric-react';\nimport {ImportOptions, InputType, NewlineSequence} from '../Parser';\nimport {SourceInput} from './SourceInput';\nimport {DelimiterInput} from './DelimiterInput';\nimport {NewlineDropdown} from './NewlineDropdown';\nimport {EncodingDropdown} from './EncodingDropdown';\nimport {ProgressBar} from './ProgressBar';\nimport * as style from './style.css';\nimport {BottomBar} from './BottomBar';\nimport {ParserOutputBox} from './ParserOutputBox';\nimport {StoredComponent} from './StoredComponent';\nimport {withTranslation} from 'react-i18next';\nimport {TranslateFunction} from './BaseProps';\nimport {MenuBar} from './MenuBar';\nimport {MemoryHistory} from 'history';\nimport {TitleBar} from './TitleBar';\n\ninterface Props extends TranslateFunction {\n    store: Store;\n    history: MemoryHistory;\n}\n\nexport class ImportComponent extends StoredComponent<Props, ImportOptions> {\n    public constructor(props: Props) {\n        super(props, 'import', {\n            source: {inputType: InputType.file, file: null, text: ''},\n            delimiter: '\\u002c',\n            newline: NewlineSequence.AutoDetect,\n            encoding: '',\n        }, ['delimiter', 'newline', 'encoding']);\n    }\n\n    public render(): React.ReactNode {\n        const t = this.props.t;\n        return (\n            <>\n                <MenuBar\n                    hidden={navigator.platform !== 'iPad'}\n                    onClick={(page) => this.props.history.push(page)}\n                />\n                <div className={style.pageMargin}>\n                    <TitleBar\n                        text={t('Import CSV')}\n                        helpLink={\n                            'https://github.com/Emurasoft/excel-csv-import-help/blob/master/en.md'\n                        }\n                    />\n                    <SourceInput\n                        value={this.state.source}\n                        onChange={(source) => this.setState({source})}\n                    />\n                    <br />\n                    <EncodingDropdown\n                        value={this.state.encoding}\n                        onChange={(encoding) => this.setState({encoding})}\n                        hidden={this.state.source.inputType === InputType.text}\n                        showAutoDetect={true}\n                    />\n                    <DelimiterInput\n                        value={this.state.delimiter}\n                        onChange={(delimiter) => this.setState({delimiter})}\n                        showLengthError={true}\n                    />\n                    <br />\n                    <NewlineDropdown\n                        value={this.state.newline as NewlineSequence}\n                        onChange={(newline) => this.setState({newline})}\n                        showAutoDetect={true}\n                    />\n                    <br />\n                    <TooltipHost\n                        styles={{root: {display: 'inline-block'}} /* Resize to fit button */}\n                        content={this.buttonTooltipContent()}\n                        delay={TooltipDelay.zero}\n                    >\n                        <PrimaryButton\n                            disabled={this.buttonTooltipContent() !== ''}\n                            onClick={this.buttonOnClick}\n                            text={t('Import CSV')}\n                        />\n                    </TooltipHost>\n                    <br />\n                    <ProgressBar\n                        onClick={this.props.store.abort}\n                        progress={this.props.store.state.progress}\n                    />\n                    <Toggle\n                        inlineLabel label={t('Save options')}\n                        defaultChecked={this.initialSaveStatus()}\n                        onChange={(_, checked) => this.setSaveStatus(checked)}\n                    />\n                    <ParserOutputBox parserOutput={this.props.store.state.parserOutput} />\n                    <BottomBar />\n                </div>\n            </>\n        );\n    }\n\n    private buttonOnClick = async () => {\n        await this.props.store.import(this.state);\n    }\n\n    private buttonTooltipContent(): string {\n        const t = this.props.t;\n        if (this.state.source.inputType == InputType.file && this.state.source.file == null) {\n            return t('Import source is not selected');\n        } else if (this.state.delimiter.length !== 1) {\n            return t('Delimiter is invalid');\n        } else if (!this.props.store.state.initialized) {\n            return t('Excel API is not initialized');\n        } else {\n            return '';\n        }\n    }\n}\n\nexport default withTranslation('importExport')(connect(ImportComponent));"],"sourceRoot":""}